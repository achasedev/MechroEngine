///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: May 9th, 2021
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Collision/CollisionPrimitive.h"
#include "Engine/Core/EngineCommon.h"
#include "Engine/Core/Entity.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------
CollisionSphere::CollisionSphere(Entity* owningEntity, const Sphere3D& sphereLs)
	: CollisionPrimitive(owningEntity)
{
	dataLs = sphereLs;
}


//-------------------------------------------------------------------------------------------------
Sphere3D CollisionSphere::GetDataInWorldSpace() const
{
	Vector3 centerWs = entity->transform.TransformPosition(dataLs.center);
	return Sphere3D(centerWs, dataLs.radius);
}


//-------------------------------------------------------------------------------------------------
CollisionHalfSpace::CollisionHalfSpace(Entity* owningEntity, const Plane3& planeLs)
	: CollisionPrimitive(owningEntity)
{
	dataLs = planeLs;
}


//-------------------------------------------------------------------------------------------------
Plane3 CollisionHalfSpace::GetDataInWorldSpace() const
{
	Vector3 normalWs = entity->transform.TransformDirection(dataLs.m_normal);
	Vector3 positionLs = dataLs.m_normal * dataLs.m_distance;
	Vector3 positionWs = entity->transform.TransformPosition(positionLs);

	return Plane3(normalWs, positionWs);
}


//-------------------------------------------------------------------------------------------------
CollisionBox::CollisionBox(Entity* owningEntity, const OBB3& boxLs)
	: CollisionPrimitive(owningEntity)
{
	dataLs = boxLs;
}


//-------------------------------------------------------------------------------------------------
OBB3 CollisionBox::GetDataInWorldSpace() const
{
	Vector3 centerWs = entity->transform.TransformPosition(dataLs.center);
	Quaternion rotationWs = entity->transform.rotation * dataLs.rotation;

	return OBB3(centerWs, dataLs.extents, rotationWs);
}
