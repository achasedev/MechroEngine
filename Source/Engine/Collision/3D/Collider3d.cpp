///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: March 18, 2021
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Collision/3D/Collider3d.h"
#include "Engine/Framework/EngineCommon.h"
#include "Engine/Math/Transform.h"
#include "Engine/Render/Core/RenderContext.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------
RTTI_TYPE_DEFINE(Collider3d);
RTTI_TYPE_DEFINE(SphereCollider3d);
RTTI_TYPE_DEFINE(CapsuleCollider3d);
RTTI_TYPE_DEFINE(PolytopeCollider3d);

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------
class Material;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------
Sphere3d SphereCollider3d::GetWorldShape()
{
	Vector3 positionWs = m_bounds.m_center;
	positionWs = m_transform.TransformPoint(positionWs);
	
	return Sphere3d(positionWs, m_bounds.m_radius);
}


//-------------------------------------------------------------------------------------------------
PolytopeCollider3d::PolytopeCollider3d(const OBB3& boxShape)
{
	m_shape = new Polygon3d(boxShape);
	m_shape->m_transform.SetParentTransform(&m_transform);
}


//-------------------------------------------------------------------------------------------------
void PolytopeCollider3d::DebugRender(Material* material)
{
	g_renderContext->DrawWirePolygon3D(*m_shape, material);
}


//-------------------------------------------------------------------------------------------------
void PolytopeCollider3d::SetShape(Polygon3d* shape)
{
	m_shape = shape;
	m_shape->m_transform.SetParentTransform(&m_transform);
}


//-------------------------------------------------------------------------------------------------
const Polygon3d* PolytopeCollider3d::GetShape() const
{
	return m_shape;
}
