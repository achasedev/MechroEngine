///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: March 18, 2021
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Collision/3D/Collider3d.h"
#include "Engine/Framework/EngineCommon.h"
#include "Engine/Math/Transform.h"
#include "Engine/Render/Core/RenderContext.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------
RTTI_TYPE_DEFINE(Collider3d);
RTTI_TYPE_DEFINE(SphereCollider3d);
RTTI_TYPE_DEFINE(BoxCollider3d);
RTTI_TYPE_DEFINE(CapsuleCollider3d);
RTTI_TYPE_DEFINE(PolytopeCollider3d);

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------
class Material;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------
Sphere3d SphereCollider3d::GetWorldBounds()
{
	Vector3 positionWs = m_bounds.center;
	positionWs = m_transform.TransformPositionLocalToWorld(positionWs);
	
	return Sphere3d(positionWs, m_bounds.radius);
}


//-------------------------------------------------------------------------------------------------
BoxCollider3d::BoxCollider3d(const OBB3& localBounds)
{
	SetShapeWs(localBounds);
}

#include "Engine/Render/Core/Renderable.h"
#include "Engine/Render/Mesh/MeshBuilder.h"
//-------------------------------------------------------------------------------------------------
void BoxCollider3d::DebugRender(Material* material)
{
	MeshBuilder mb;
	mb.BeginBuilding(true);

	mb.PushCube(Vector3::ZERO, m_shape.GetExtents());
	mb.FinishBuilding();

	Mesh mesh;
	mb.UpdateMesh<Vertex3D_PCU>(mesh);

	Matrix44 model = m_shape.m_transform.GetLocalToWorldMatrix();

	Renderable rend;
	rend.SetRenderableMatrix(model);
	rend.AddDraw(&mesh, material);

	g_renderContext->DrawRenderable(rend);
}


//-------------------------------------------------------------------------------------------------
void BoxCollider3d::SetShapeWs(const OBB3& localBounds)
{
	m_shape = localBounds;
	m_shape.m_transform.SetParentTransform(&m_transform, true);
}


//-------------------------------------------------------------------------------------------------
OBB3 BoxCollider3d::GetShapeWs()
{
	return m_shape;
}
