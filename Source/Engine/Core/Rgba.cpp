///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: February 15th, 2020
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/Rgba.h"
#include "Engine/Math/MathUtils.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------
const Rgba Rgba::WHITE		= Rgba(255, 255, 255, 255);
const Rgba Rgba::BLACK		= Rgba(0, 0, 0, 255);
const Rgba Rgba::RED		= Rgba(255, 0, 0, 255);
const Rgba Rgba::GREEN		= Rgba(0, 255, 0, 255);
const Rgba Rgba::BLUE		= Rgba(0, 0, 255, 255);
const Rgba Rgba::CYAN		= Rgba(0, 255, 255, 255);
const Rgba Rgba::MAGENTA	= Rgba(255, 0, 255, 255);
const Rgba Rgba::YELLOW		= Rgba(255, 255, 0, 255);
const Rgba Rgba::GRAY		= Rgba(153, 153, 153, 255);
const Rgba Rgba::ORANGE		= Rgba(255, 140, 0, 255);


///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Rgba::Rgba()
	: Rgba(255, 255, 255, 255)
{
}


//-------------------------------------------------------------------------------------------------
Rgba::Rgba(float red, float green, float blue, float alpha)
{
	SetFromFloats(red, green, blue, alpha);
}


//-------------------------------------------------------------------------------------------------
Rgba::Rgba(int red, int green, int blue, int alpha)
{
	// Make sure everything is in a valid range
	red = Clamp(red, 0, 255);
	green = Clamp(green, 0, 255);
	blue = Clamp(blue, 0, 255);
	alpha = Clamp(alpha, 0, 255);

	// Convert to 8 bit numbers
	r = (static_cast<uint8>(red));
	g = (static_cast<uint8>(green));
	b = (static_cast<uint8>(blue));
	a = (static_cast<uint8>(alpha));
}


//-------------------------------------------------------------------------------------------------
Rgba::Rgba(const Rgba& copy)
	: r(copy.r)
	, g(copy.g)
	, b(copy.b)
	, a(copy.a)
{
}


//-------------------------------------------------------------------------------------------------
Rgba::Rgba(const Vector4& colors)
{
	SetFromFloats(colors);
}


//-------------------------------------------------------------------------------------------------
void Rgba::SetFromFloats(float red, float green, float blue, float alpha)
{
	r = NormalizedFloatToByte(red);
	g = NormalizedFloatToByte(green);
	b = NormalizedFloatToByte(blue);
	a = NormalizedFloatToByte(alpha);
}


//-------------------------------------------------------------------------------------------------
void Rgba::SetFromFloats(const Vector4& colors)
{
	SetFromFloats(colors.x, colors.y, colors.z, colors.w);
}


//-------------------------------------------------------------------------------------------------
float Rgba::GetRedFloat() const
{
	return Normalize(r);
}


//-------------------------------------------------------------------------------------------------
float Rgba::GetGreenFloat() const
{
	return Normalize(g);
}


//-------------------------------------------------------------------------------------------------
float Rgba::GetBlueFloat() const
{
	return Normalize(b);
}


//-------------------------------------------------------------------------------------------------
float Rgba::GetAlphaFloat() const
{
	return Normalize(a);
}


//-------------------------------------------------------------------------------------------------
Vector4 Rgba::GetAsFloats() const
{
	return Vector4(Normalize(r), Normalize(g), Normalize(b), Normalize(a));
}


//-------------------------------------------------------------------------------------------------
// Will clamp between 0 and 255
Rgba Rgba::operator*(float uniformScaler) const
{
	Vector4 asFloats = GetAsFloats();
	asFloats *= uniformScaler;

	return Rgba(asFloats);
}


//-------------------------------------------------------------------------------------------------
bool Rgba::operator==(const Rgba& other) const
{
	return r == other.r && g == other.g && b == other.b && a == other.a;
}


//-------------------------------------------------------------------------------------------------
bool Rgba::operator!=(const Rgba& other) const
{
	return r != other.r || g != other.g || b != other.b || a != other.a;
}


//-------------------------------------------------------------------------------------------------
const Rgba operator*(float uniformScale, const Rgba& color)
{
	return color * uniformScale;
}


//-------------------------------------------------------------------------------------------------
Rgba Rgba::GetRandomColor()
{
	float red = GetRandomFloatZeroToOne();
	float green = GetRandomFloatZeroToOne();
	float blue = GetRandomFloatZeroToOne();

	return Rgba(red, green, blue, 1.0f);
}

