///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: February 12th, 2021
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/EngineCommon.h"
#include "Engine/Core/Entity.h"
#include "Engine/Core/Rgba.h"
#include "Engine/Render/Debug/DebugRenderSystem.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------
EntityID Entity::s_nextEntityID = 0;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Entity::Entity()
	: m_id(s_nextEntityID)
	, physicsBoundingShapeLs(BoundingVolumeSphere(Sphere3D(Vector3::ZERO, 1.f)))
{
	++s_nextEntityID;

	m_collisionPrimitive = new CollisionBox(this, OBB3(Vector3::ZERO, Vector3(0.5f), Quaternion::IDENTITY));
}


//-------------------------------------------------------------------------------------------------
void Entity::Render() const
{
	DebugDrawCube(Vector3::ZERO, 0.5f * renderShapeLs.GetDimensions(), Rgba::WHITE, 0.f, &transform);
}


//-------------------------------------------------------------------------------------------------
BoundingVolumeSphere Entity::GetWorldPhysicsBoundingVolume() const
{
	BoundingVolumeSphere worldBounds = physicsBoundingShapeLs;
	worldBounds.center = transform.TransformPosition(worldBounds.center);

	return worldBounds;
}
