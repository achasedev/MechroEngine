///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: March 26th, 2020
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Time/Time.h"
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------
TimeSystem TimeSystem::s_timeSystem;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
TimeSystem::TimeSystem()
{
	LARGE_INTEGER frequency;
	QueryPerformanceFrequency(&frequency);

	m_frequency = *(uint64_t*)&frequency;
	m_secondsPerCount = 1.0 / (double)m_frequency;
}


//-------------------------------------------------------------------------------------------------
double TimeSystem::PerformanceCountToSeconds(uint64 hpc)
{
	return (double)hpc * s_timeSystem.m_secondsPerCount;
}


//-------------------------------------------------------------------------------------------------
uint64 TimeSystem::SecondsToPerformanceCount(double seconds)
{
	return (uint64)(seconds * (double)s_timeSystem.m_frequency);
}


//-------------------------------------------------------------------------------------------------
uint64 GetPerformanceCounter()
{
	LARGE_INTEGER currentCount;
	QueryPerformanceCounter(&currentCount);

	return *(uint64*)&currentCount;
}


//-------------------------------------------------------------------------------------------------
std::string GetFormattedSystemDateAndTime()
{
	SYSTEMTIME st;
	GetLocalTime(&st);

	std::string formattedTime = Stringf("%d_%d_%d_%d_%d_%d",
		st.wMonth, st.wDay, st.wYear, st.wHour, st.wMinute, st.wSecond);

	return formattedTime;
}


//-------------------------------------------------------------------------------------------------
std::string GetFormattedSystemTime()
{
	SYSTEMTIME st;
	GetLocalTime(&st);

	std::string formattedTime = Stringf("%d:%d:%d",
		st.wHour, st.wMinute, st.wSecond);

	return formattedTime;
}
