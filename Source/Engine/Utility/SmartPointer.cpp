///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: March 29th, 2020
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/EngineCommon.h"
#include "Engine/Utility/LockJanitor.h"
#include "Engine/Utility/SmartPointer.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------
std::mutex RefCount::s_registryLock;
std::map<void*, RefCount*> RefCount::s_refCountRegistry;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
RefCount::RefCount(void* pointer)
	: m_pointer(pointer)
{
}


//-------------------------------------------------------------------------------------------------
uint32 RefCount::AddRef()
{
	LOCK_JANITOR(m_lock);
	return ++m_count;
}


//-------------------------------------------------------------------------------------------------
uint32 RefCount::Release()
{
	LOCK_JANITOR(m_lock);
	--m_count;	

	// If no one is referencing this pointer anymore,
	// remove it from the list
	if (m_count == 0)
	{
		LOCK_JANITOR(s_registryLock); 
		s_refCountRegistry.erase(m_pointer);
	}

	return m_count;
}


//-------------------------------------------------------------------------------------------------
STATIC RefCount* RefCount::CreateOrGetRefCount(void* pointer)
{
	ASSERT_OR_DIE(pointer != nullptr, "Trying to refcount a nullptr!");

	LOCK_JANITOR(s_registryLock);

	// Check if this pointer is already being refcounted
	if (s_refCountRegistry.find(pointer) != s_refCountRegistry.end())
	{
		return s_refCountRegistry[pointer];
	}

	// Doesn't exist, create one and return
	RefCount* newCount = new RefCount(pointer);
	s_refCountRegistry[pointer] = newCount;

	return newCount;
}
