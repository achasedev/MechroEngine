///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: Oct 26th, 2021
/// Description: Class to represent a value that has no invalid value, and needs to be distinguished as being valid; basically std::optional
///--------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
template <typename T>
class Maybe
{
public:
	//-----Public Methods-----

	Maybe() {}
	explicit Maybe(const T& value)
		: m_value(value), m_isValid(true) {}


	void	Set(const T& value);
	T		Get() const { return m_value; }
	bool	IsValid() const { return m_isValid; }


public:
	//-----Public Data-----

	static const Maybe INVALID;


private:
	//-----Private Data-----

	T		m_value;
	bool	m_isValid = false;

};


//-------------------------------------------------------------------------------------------------
// Sets the value, ensuring it's also marked as valid
template <typename T>
void Maybe<T>::Set(const T& value)
{
	m_value = value;
	m_isValid = true;
}


template <typename T>
const Maybe<T> Maybe<T>::INVALID = Maybe<T>();

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------