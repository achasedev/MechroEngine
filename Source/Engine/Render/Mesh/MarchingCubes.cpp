///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: Nov 27th, 2021
/// Description: http://paulbourke.net/geometry/polygonise/ for the edge table
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/EngineCommon.h"
#include "Engine/Math/LineSegment3.h"
#include "Engine/Math/MathUtils.h"
#include "Engine/Math/ScalarField3.h"
#include "Engine/Math/Vector3.h"
#include "Engine/Render/Mesh/MarchingCubes.h"
#include "Engine/Render/Mesh/MeshBuilder.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Pulled directly from the Paul Bourke article
// Index into this table is an 8-bit bitfield indicating which vertices are above the level
// This is using their index convention, not mine! Convert to their indices before indexing into this table
// Example: Let's say only 0 (my convention) was under the surface -> 0000 0001 (1) index -> 0000 1000 (8) in their convention -> EDGE_TABLE[8] -> 0x80c -> edges 2, 3, and 11 are intersected in their system -> edges 0, 3, and 4 in my system
//
//		  THEIRS                   MINE
//    (5)------(6)             (6)------(5)
//    /        /|		       /        /|
//   /        / |		      /        / |	
// (1)------(2) |           (1)-------(2)| 
//  |        |  |	  ==>    |        |  |	
//  | (4)    | (7)		     | (7)    | (4)
//  |        | /		     |        | /
//  |        |/			     |        |/	
// (0)------(3)			    (0)------(3)	


const unsigned int MarchingCubes::EDGE_TABLE[256] = 
{
	0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
	0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
	0x890, 0x999, 0xa93, 0xb9a, 0xc96, 0xd9f, 0xe95, 0xf9c,
	0x9c, 0x195, 0x29f, 0x396, 0x49a, 0x593, 0x699, 0x790,
	0x430, 0x539, 0x633, 0x73a, 0x36, 0x13f, 0x235, 0x33c,
	0xc3c, 0xd35, 0xe3f, 0xf36, 0x83a, 0x933, 0xa39, 0xb30,
	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
	0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
	0x260, 0x369, 0x63, 0x16a, 0x666, 0x76f, 0x465, 0x56c,
	0xa6c, 0xb65, 0x86f, 0x966, 0xe6a, 0xf63, 0xc69, 0xd60,
	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
	0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
	0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
	0xec0, 0xfc9, 0xcc3, 0xdca, 0xac6, 0xbcf, 0x8c5, 0x9cc,
	0x6cc, 0x7c5, 0x4cf, 0x5c6, 0x2ca, 0x3c3, 0xc9, 0x1c0,
	0x1c0, 0xc9, 0x3c3, 0x2ca, 0x5c6, 0x4cf, 0x7c5, 0x6cc,
	0x9cc, 0x8c5, 0xbcf, 0xac6, 0xdca, 0xcc3, 0xfc9, 0xec0,
	0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
	0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
	0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
	0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
	0xd60, 0xc69, 0xf63, 0xe6a, 0x966, 0x86f, 0xb65, 0xa6c,
	0x56c, 0x465, 0x76f, 0x666, 0x16a, 0x63, 0x369, 0x260,
	0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
	0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
	0xb30, 0xa39, 0x933, 0x83a, 0xf36, 0xe3f, 0xd35, 0xc3c,
	0x33c, 0x235, 0x13f, 0x36, 0x73a, 0x633, 0x539, 0x430,
	0x790, 0x699, 0x593, 0x49a, 0x396, 0x29f, 0x195, 0x9c,
	0xf9c, 0xe95, 0xd9f, 0xc96, 0xb9a, 0xa93, 0x999, 0x890,
	0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
	0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
};


const int MarchingCubes::TRI_TABLE[256][16] = 
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 0, 8, 11, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 1, 9, 11, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 1, 9, 8, 3, 1, 11, 7, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 1, 2, 4, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, 3, 0, 8, 4, 11, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 9, 0, 2, 10, 9, 4, 11, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 4, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1 },
	{ 7, 2, 3, 4, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 0, 8, 7, 4, 0, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 7, 4, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 4, 2, 1, 8, 4, 1, 9, 8, 8, 7, 4, -1, -1, -1, -1 },
	{ 10, 7, 4, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 7, 4, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1 },
	{ 0, 3, 7, 0, 7, 10, 0, 10, 9, 4, 10, 7, -1, -1, -1, -1 },
	{ 7, 4, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, 5, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 0, 1, 5, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 8, 3, 1, 9, 8, 5, 10, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 4, 5, 2, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 4, 5, 1, 2, 4, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 4, 5, 9, 0, 4, 0, 2, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 9, 8, 5, 8, 2, 5, 2, 4, 3, 2, 8, -1, -1, -1, -1 },
	{ 2, 3, 11, 10, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 0, 8, 11, 2, 0, 10, 4, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 1, 9, 2, 3, 11, 5, 10, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 10, 4, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1 },
	{ 4, 3, 11, 4, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 4, -1, -1, -1, -1 },
	{ 3, 11, 4, 0, 3, 4, 0, 4, 5, 0, 5, 9, -1, -1, -1, -1 },
	{ 4, 5, 9, 4, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1 },
	{ 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1 },
	{ 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1 },
	{ 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1 },
	{ 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1 },
	{ 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1 },
	{ 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1 },
	{ 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 5, 6, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 5, 6, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 5, 6, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, 9, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 0, 8, 1, 2, 10, 6, 9, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 2, 10, 5, 6, 2, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 10, 5, 3, 2, 5, 3, 5, 6, 3, 6, 8, -1, -1, -1, -1 },
	{ 9, 5, 6, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 11, 2, 0, 8, 11, 6, 9, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 5, 6, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 1, 5, 2, 5, 8, 2, 8, 11, 6, 8, 5, -1, -1, -1, -1 },
	{ 10, 3, 11, 10, 1, 3, 9, 5, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1 },
	{ 5, 6, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1 },
	{ 5, 6, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 9, 5, 7, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, 6, 9, 5, 11, 7, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 0, 1, 5, 6, 0, 7, 4, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 7, 4, 8, 3, 6, 3, 5, 6, 3, 1, 5, -1, -1, -1, -1 },
	{ 9, 5, 6, 10, 1, 2, 7, 4, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 4, 11, 7, 1, 2, 10, 0, 8, 3, 6, 9, 5, -1, -1, -1, -1 },
	{ 7, 4, 11, 5, 6, 10, 6, 2, 10, 6, 0, 2, -1, -1, -1, -1 },
	{ 3, 6, 8, 3, 5, 6, 3, 2, 5, 10, 5, 2, 11, 7, 4, -1 },
	{ 7, 2, 3, 7, 4, 2, 5, 6, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 5, 6, 0, 8, 4, 0, 4, 2, 4, 8, 7, -1, -1, -1, -1 },
	{ 3, 4, 2, 3, 7, 4, 1, 5, 0, 5, 6, 0, -1, -1, -1, -1 },
	{ 4, 2, 8, 4, 8, 7, 2, 1, 8, 6, 8, 5, 1, 5, 8, -1 },
	{ 9, 5, 6, 10, 1, 4, 1, 7, 4, 1, 3, 7, -1, -1, -1, -1 },
	{ 1, 4, 10, 1, 7, 4, 1, 0, 7, 8, 7, 0, 9, 5, 6, -1 },
	{ 6, 0, 10, 6, 10, 5, 0, 3, 10, 4, 10, 7, 3, 7, 10, -1 },
	{ 7, 4, 10, 7, 10, 8, 5, 6, 10, 6, 8, 10, -1, -1, -1, -1 },
	{ 10, 6, 9, 4, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 10, 4, 6, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 0, 1, 10, 4, 0, 4, 6, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 3, 1, 8, 1, 4, 8, 4, 6, 4, 1, 10, -1, -1, -1, -1 },
	{ 1, 6, 9, 1, 2, 6, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 0, 8, 1, 2, 9, 2, 6, 9, 2, 4, 6, -1, -1, -1, -1 },
	{ 0, 2, 6, 6, 2, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 3, 2, 8, 2, 6, 6, 2, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 6, 9, 10, 4, 6, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 2, 2, 8, 11, 6, 9, 10, 6, 10, 4, -1, -1, -1, -1 },
	{ 3, 11, 2, 0, 1, 4, 0, 4, 6, 4, 1, 10, -1, -1, -1, -1 },
	{ 4, 6, 1, 4, 1, 10, 6, 8, 1, 2, 1, 11, 8, 11, 1, -1 },
	{ 9, 4, 6, 9, 3, 4, 9, 1, 3, 11, 4, 3, -1, -1, -1, -1 },
	{ 8, 11, 1, 8, 1, 0, 11, 4, 1, 9, 1, 6, 4, 6, 1, -1 },
	{ 3, 11, 4, 3, 4, 0, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 4, 6, 8, 11, 4, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 11, 7, 6, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 8, 3, 6, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1 },
	{ 1, 10, 11, 1, 11, 6, 1, 6, 0, 7, 6, 11, -1, -1, -1, -1 },
	{ 3, 1, 6, 3, 6, 8, 1, 10, 6, 7, 6, 11, 10, 11, 6, -1 },
	{ 6, 11, 7, 9, 11, 6, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1 },
	{ 9, 7, 6, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1 },
	{ 11, 7, 6, 11, 6, 2, 2, 6, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 7, 6, 11, 6, 2, 8, 3, 6, 3, 2, 6, -1, -1, -1, -1 },
	{ 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 6, 9, -1, -1, -1, -1 },
	{ 9, 10, 7, 9, 7, 6, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1 },
	{ 3, 7, 10, 3, 10, 2, 7, 6, 10, 1, 10, 0, 6, 0, 10, -1 },
	{ 1, 10, 2, 8, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 9, 1, 6, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 9, 1, 6, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1 },
	{ 6, 0, 3, 7, 6, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 3, 0, 7, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 1, 9, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 1, 9, 6, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 6, 7, 3, 0, 6, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 2, 10, 9, 0, 2, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 6, -1, -1, -1, -1 },
	{ 8, 6, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 11, 6, 7, 11, 2, 6, 2, 0, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 0, 1, 8, 6, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 7, 11, 9, 6, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1 },
	{ 3, 10, 1, 3, 11, 10, 7, 8, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 11, 10, 1, 6, 11, 1, 0, 6, 7, 11, 6, -1, -1, -1, -1 },
	{ 6, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1 },
	{ 6, 7, 11, 6, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 4, 8, 6, 11, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 4, 11, 3, 0, 4, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 4, 11, 8, 6, 4, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 6, 4, 9, 4, 3, 9, 3, 1, 11, 3, 4, -1, -1, -1, -1 },
	{ 4, 8, 6, 4, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, 3, 0, 11, 0, 4, 11, 0, 6, 4, -1, -1, -1, -1 },
	{ 6, 11, 8, 6, 4, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1 },
	{ 10, 9, 3, 10, 3, 2, 9, 6, 3, 11, 3, 4, 6, 4, 3, -1 },
	{ 8, 2, 3, 8, 6, 2, 6, 4, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 6, 2, 6, 4, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 9, 0, 2, 3, 6, 2, 6, 4, 6, 3, 8, -1, -1, -1, -1 },
	{ 1, 9, 6, 1, 6, 2, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 1, 3, 8, 4, 1, 8, 6, 4, 4, 10, 1, -1, -1, -1, -1 },
	{ 10, 1, 0, 10, 0, 4, 4, 0, 6, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 4, 3, 6, 3, 8, 4, 10, 3, 0, 3, 9, 10, 9, 3, -1 },
	{ 10, 9, 6, 4, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 10, 4, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 6, 3, 0, 6, 7, 3, 4, 5, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 9, 0, 5, 10, 4, 8, 6, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 4, 5, 1, 9, 7, 1, 7, 3, 7, 9, 6, -1, -1, -1, -1 },
	{ 4, 1, 2, 4, 5, 1, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 5, 5, 2, 4, 3, 0, 6, 3, 6, 7, -1, -1, -1, -1 },
	{ 8, 6, 7, 9, 0, 5, 0, 4, 5, 0, 2, 4, -1, -1, -1, -1 },
	{ 7, 3, 9, 7, 9, 6, 3, 2, 9, 5, 9, 4, 2, 4, 9, -1 },
	{ 3, 11, 2, 7, 8, 6, 10, 4, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 10, 4, 6, 7, 2, 6, 2, 0, 2, 7, 11, -1, -1, -1, -1 },
	{ 0, 1, 9, 6, 7, 8, 2, 3, 11, 5, 10, 4, -1, -1, -1, -1 },
	{ 9, 2, 1, 9, 11, 2, 9, 6, 11, 7, 11, 6, 5, 10, 4, -1 },
	{ 8, 6, 7, 3, 11, 5, 3, 5, 1, 5, 11, 4, -1, -1, -1, -1 },
	{ 5, 1, 11, 5, 11, 4, 1, 0, 11, 7, 11, 6, 0, 6, 11, -1 },
	{ 0, 5, 9, 0, 4, 5, 0, 3, 4, 11, 4, 3, 8, 6, 7, -1 },
	{ 4, 5, 9, 4, 9, 11, 6, 7, 9, 7, 11, 9, -1, -1, -1, -1 },
	{ 5, 8, 6, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 5, 0, 6, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1 },
	{ 0, 1, 9, 8, 6, 10, 8, 10, 11, 10, 6, 5, -1, -1, -1, -1 },
	{ 10, 11, 6, 10, 6, 5, 11, 3, 6, 9, 6, 1, 3, 1, 6, -1 },
	{ 2, 5, 1, 2, 8, 5, 2, 11, 8, 6, 5, 8, -1, -1, -1, -1 },
	{ 0, 6, 11, 0, 11, 3, 6, 5, 11, 2, 11, 1, 5, 1, 11, -1 },
	{ 0, 2, 5, 0, 5, 9, 2, 11, 5, 6, 5, 8, 11, 8, 5, -1 },
	{ 9, 6, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 5, 10, 3, 5, 2, 3, 6, 5, 3, 8, 6, -1, -1, -1, -1 },
	{ 5, 10, 2, 5, 2, 6, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 10, 2, 3, 5, 10, 3, 8, 5, 6, 5, 8, 0, 1, 9, -1 },
	{ 5, 10, 2, 5, 2, 6, 1, 9, 2, 9, 6, 2, -1, -1, -1, -1 },
	{ 8, 6, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 6, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 8, 6, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1 },
	{ 9, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1 },
	{ 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1 },
	{ 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1 },
	{ 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1 },
	{ 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1 },
	{ 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1 },
	{ 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1 },
	{ 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 4, 9, 5, 4, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 4, 11, 0, 4, 3, 0, 5, 4, 0, 9, 5, -1, -1, -1, -1 },
	{ 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 4, 11, -1, -1, -1, -1 },
	{ 4, 11, 3, 4, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 4, -1, -1, -1, -1 },
	{ 0, 11, 3, 0, 4, 11, 0, 9, 4, 5, 4, 9, 1, 2, 10, -1 },
	{ 11, 8, 5, 11, 5, 4, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1 },
	{ 4, 11, 3, 4, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1 },
	{ 5, 8, 9, 5, 2, 8, 5, 4, 2, 3, 8, 2, -1, -1, -1, -1 },
	{ 9, 5, 4, 9, 4, 0, 0, 4, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 5, 8, 1, 8, 0, 5, 4, 8, 3, 8, 2, 4, 2, 8, -1 },
	{ 1, 5, 4, 2, 1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 3, 4, 1, 4, 10, 3, 8, 4, 5, 4, 9, 8, 9, 4, -1 },
	{ 10, 1, 0, 10, 0, 4, 9, 5, 0, 5, 4, 0, -1, -1, -1, -1 },
	{ 0, 3, 8, 5, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 10, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 10, 4, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 7, 3, 0, 10, 7, 0, 9, 10, 4, 7, 10, -1, -1, -1, -1 },
	{ 10, 4, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1 },
	{ 10, 4, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 4, 1, 4, 8, 1, 8, 9, 8, 4, 7, -1, -1, -1, -1 },
	{ 2, 4, 9, 2, 9, 1, 4, 7, 9, 0, 9, 3, 7, 3, 9, -1 },
	{ 7, 8, 0, 7, 0, 4, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 3, 2, 4, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 3, 11, 10, 4, 8, 10, 8, 9, 8, 4, 7, -1, -1, -1, -1 },
	{ 2, 0, 7, 2, 7, 11, 0, 9, 7, 4, 7, 10, 9, 10, 7, -1 },
	{ 1, 8, 0, 1, 7, 8, 1, 10, 7, 4, 7, 10, 2, 3, 11, -1 },
	{ 11, 2, 1, 11, 1, 7, 10, 4, 1, 4, 7, 1, -1, -1, -1, -1 },
	{ 8, 9, 4, 8, 4, 7, 9, 1, 4, 11, 4, 3, 1, 3, 4, -1 },
	{ 0, 9, 1, 11, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 7, 8, 0, 7, 0, 4, 3, 11, 0, 11, 4, 0, -1, -1, -1, -1 },
	{ 7, 11, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1 },
	{ 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1 },
	{ 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1 },
	{ 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
};

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
int ConvertToTheirEdgeIndex(int myEdgeIndex)
{
	const int table[12] = { 0, 1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11 };
	return table[myEdgeIndex];
}


//-------------------------------------------------------------------------------------------------
int ConvertToTheirVertexIndex(int myVertexIndex)
{
	const int table[8] = { 0, 1, 2, 3, 7, 6, 5, 4 };
	return table[myVertexIndex];
}


//-------------------------------------------------------------------------------------------------
int ConvertToMyEdgeIndex(int theirEdgeIndex)
{
	if (theirEdgeIndex == -1)
		return -1;

	const int table[12] = { 0, 1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11 };
	return table[theirEdgeIndex];
}


//-------------------------------------------------------------------------------------------------
int ConvertToMyVertexIndex(int theirVertexIndex)
{
	if (theirVertexIndex == -1)
		return -1;

	const int table[8] = { 0, 1, 2, 3, 7, 6, 5, 4 };
	return table[theirVertexIndex];
}


//-------------------------------------------------------------------------------------------------
static void GetEdgeEndpoints(int edgeIndex, const IntVector3& offset, IntVector3& out_v1, IntVector3& out_v2)
{
	out_v1 = offset;
	out_v2 = offset;

	switch (edgeIndex)
	{
	case 0: 
		out_v1 += IntVector3(0, 0, 0);
		out_v2 += IntVector3(0, 1, 0);
		break;
	case 1:
		out_v1 += IntVector3(0, 1, 0);
		out_v2 += IntVector3(1, 1, 0);
		break;
	case 2: 
		out_v1 += IntVector3(1, 1, 0);
		out_v2 += IntVector3(1, 0, 0);
		break;
	case 3:
		out_v1 += IntVector3(1, 0, 0);
		out_v2 += IntVector3(0, 0, 0);
		break;
	case 4:
		out_v1 += IntVector3(1, 0, 1);
		out_v2 += IntVector3(1, 1, 1);
		break;
	case 5:
		out_v1 += IntVector3(1, 1, 1);
		out_v2 += IntVector3(0, 1, 1);
		break;
	case 6:
		out_v1 += IntVector3(0, 1, 1);
		out_v2 += IntVector3(0, 0, 1);
		break;
	case 7:
		out_v1 += IntVector3(0, 0, 1);
		out_v2 += IntVector3(1, 0, 1);
		break;
	case 8:
		out_v1 += IntVector3(0, 0, 0);
		out_v2 += IntVector3(0, 0, 1);
		break;
	case 9:
		out_v1 += IntVector3(0, 1, 0);
		out_v2 += IntVector3(0, 1, 1);
		break;
	case 10:
		out_v1 += IntVector3(1, 1, 0);
		out_v2 += IntVector3(1, 1, 1);
		break;
	case 11:
		out_v1 += IntVector3(1, 0, 0);
		out_v2 += IntVector3(1, 0, 1);
		break;
	default:
		ERROR_AND_DIE("Bad index!");
		break;
	}
}


//-------------------------------------------------------------------------------------------------
static Vector3 FindIntersection(int edgeIndex, float isoLevel, const IntVector3& offset, const ScalarField3& scalarField)
{
	IntVector3 v1, v2;

	GetEdgeEndpoints(edgeIndex, offset, v1, v2);

	float v1Val = scalarField.GetValue(v1);
	float v2Val = scalarField.GetValue(v2);

	float t = GetFractionInRange(isoLevel, v1Val, v2Val);
	Vector3 pt = Interpolate(Vector3(v1), Vector3(v2), t);

	return pt;
}


///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Mesh* MarchingCubes::CreateMesh(const ScalarField3& scalarField, float isoLevel)
{
	IntVector3 dimensions = scalarField.GetDimensions();
	IntVector3 numSteps = dimensions - (IntVector3(1, 1, 1));
	Maybe<Vector3> vertices[12];
	MeshBuilder mb;
	mb.BeginBuilding(TOPOLOGY_TRIANGLE_LIST, false);

	for (int z = 0; z < numSteps.z; ++z)
	{
		for (int y = 0; y < numSteps.y; ++y)
		{
			for (int x = 0; x < numSteps.x; ++x)
			{
				int tableIndex = 0;

				IntVector3 theirs = IntVector3(x, y, z);
				if (scalarField.GetValue(x,		y,		z) < isoLevel)		{ tableIndex |= 1; }
				if (scalarField.GetValue(x,		y + 1,	z) < isoLevel)		{ tableIndex |= 2; }
				if (scalarField.GetValue(x + 1, y + 1,	z) < isoLevel)		{ tableIndex |= 4; }
				if (scalarField.GetValue(x + 1, y,		z) < isoLevel)		{ tableIndex |= 8; }
				if (scalarField.GetValue(x + 1,	y,		z + 1) < isoLevel)	{ tableIndex |= 16; }
				if (scalarField.GetValue(x + 1,	y + 1,	z + 1) < isoLevel)	{ tableIndex |= 32; }
				if (scalarField.GetValue(x,		y + 1,	z + 1) < isoLevel)	{ tableIndex |= 64; }
				if (scalarField.GetValue(x,		y,		z + 1) < isoLevel)	{ tableIndex |= 128; }

				
				if (EDGE_TABLE[tableIndex] != 0) 
				{
					if (EDGE_TABLE[tableIndex] & 8) 
					{
						vertices[3].Set(FindIntersection(3, isoLevel, IntVector3(x, y, z), scalarField));
					}

					if (EDGE_TABLE[tableIndex] & 1) 
					{
						vertices[0].Set(FindIntersection(0, isoLevel, IntVector3(x, y, z), scalarField));
					}

					if (EDGE_TABLE[tableIndex] & 256) 
					{
						vertices[8].Set(FindIntersection(8, isoLevel, IntVector3(x, y, z), scalarField));

					}

					//if (x == numSteps.x - 1)
					{
						if (EDGE_TABLE[tableIndex] & 4)
						{
							vertices[2].Set(FindIntersection(2, isoLevel, IntVector3(x, y, z), scalarField));
						}

						if (EDGE_TABLE[tableIndex] & 2048)
						{
							vertices[11].Set(FindIntersection(11, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}

					//if (y == numSteps.y - 1)
					{
						if (EDGE_TABLE[tableIndex] & 2) 
						{
							vertices[1].Set(FindIntersection(1, isoLevel, IntVector3(x, y, z), scalarField));
						}

						if (EDGE_TABLE[tableIndex] & 512) 
						{
							vertices[9].Set(FindIntersection(9, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}

					//if (z == numSteps.z - 1)
					{
						if (EDGE_TABLE[tableIndex] & 16) 
						{
							vertices[4].Set(FindIntersection(4, isoLevel, IntVector3(x, y, z), scalarField));
						}

						if (EDGE_TABLE[tableIndex] & 128)
						{
							vertices[7].Set(FindIntersection(7, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}

					//if ((x == numSteps.x - 1) && (y == numSteps.y - 1))
					{
						if (EDGE_TABLE[tableIndex] & 1024) 
						{
							vertices[10].Set(FindIntersection(10, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}
						
					//if ((x == numSteps.x - 1) && (z == numSteps.z - 1))
					{
						if (EDGE_TABLE[tableIndex] & 64) 
						{
							vertices[6].Set(FindIntersection(6, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}
						
					//if ((y == numSteps.y - 1) && (z == numSteps.z - 1))
					{
						if (EDGE_TABLE[tableIndex] & 32) 
						{
							vertices[5].Set(FindIntersection(5, isoLevel, IntVector3(x, y, z), scalarField));
						}
					}		

					for (unsigned int i = 0; TRI_TABLE[tableIndex][i] != -1; i += 3) 
					{
						int iA = TRI_TABLE[tableIndex][i];
						int iB = TRI_TABLE[tableIndex][i + 1];
						int iC = TRI_TABLE[tableIndex][i + 2];

						ASSERT_OR_DIE(vertices[iA].IsValid() && vertices[iB].IsValid() && vertices[iC].IsValid(), "Bad vertex!");

						Vector3 a = vertices[iA].Get();
						Vector3 b = vertices[iB].Get();
						Vector3 c = vertices[iC].Get();

						mb.PushTriangle3(a, c, b, Rgba::WHITE);
					}
				}
			}
		}
	}

	mb.GenerateFlatNormals();
	mb.FinishBuilding();
	
	return mb.CreateMesh<Vertex3D_PCU>();
}
