///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: Nov 16th, 2021
/// Description: 2D shape in 3D - all points must exist in a single plane
///--------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Math/Vector3.h"
#include <vector>

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------
class Matrix3;
class Polygon2;

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
class Polygon3
{
public:
	//-----Public Methods-----

	Polygon3() {}
	Polygon3(const std::vector<Vector3>& vertices);

	void		PerformChecks(bool checkForDuplicates, bool checkForCoplanarity, bool checkForConvexity, bool checkForSelfIntersections, bool checkForColinearPoints) const;
	void		Clear();


	int			GetNumVertices() const { return (int)m_vertices.size(); }
	void		TransformSelfInto2DBasis(Polygon2& out_poly2) const;
	Vector2		TransformPointInto2DBasis(const Vector3& point) const;
	Vector3		TransformPointOutOf2DBasis(const Vector2& point) const;

	bool		IsSelfIntersecting() const;
	bool		IsConvex() const;
	bool		IsConcave() const { return !IsConvex(); }
	bool		HasDuplicateVertices() const;
	bool		HasColinearPoints() const;
	bool		ArePointsCoplanar() const;


private:
	//-----Private Methods-----

	void		GetBasis(Matrix3& out_bases) const;


public:
	//-----Public Data-----

	std::vector<Vector3> m_vertices;

};

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------