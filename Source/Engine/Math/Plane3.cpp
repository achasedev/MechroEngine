///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: November 23rd, 2020
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/EngineCommon.h"
#include "Engine/Math/MathUtils.h"
#include "Engine/Math/Plane3.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Plane3::Plane3(const Vector3& normal, float distance)
	: m_normal(normal), m_d(distance)
{
}


//-------------------------------------------------------------------------------------------------
Plane3::Plane3(const Vector3& normal, const Vector3& pointOnPlane)
	: m_normal(normal)
{
	m_d = DotProduct(normal, pointOnPlane);
}


//-------------------------------------------------------------------------------------------------
Plane3::Plane3(const Vector3& ptA, const Vector3& ptB, const Vector3& ptC)
{
	Vector3 ab = ptB - ptA;
	Vector3 ac = ptC - ptA;
	m_normal = CrossProduct(ab, ac).GetNormalized();

	m_d = DotProduct(m_normal, ptA);
}


//-------------------------------------------------------------------------------------------------
bool Plane3::ContainsPoint(const Vector3& point) const
{
	float t = GetTFromPlane(point);
	return (Abs(t) < DEFAULT_EPSILON);
}


//-------------------------------------------------------------------------------------------------
bool Plane3::IsPointInFront(const Vector3& point) const
{
	float t = GetTFromPlane(point);
	return (t > -DEFAULT_EPSILON);
}


//-------------------------------------------------------------------------------------------------
bool Plane3::IsPointBehind(const Vector3& point) const
{
	float t = GetTFromPlane(point);
	return (t < DEFAULT_EPSILON);
}


//-------------------------------------------------------------------------------------------------
float Plane3::GetDistanceFromPlane(const Vector3& point) const
{
	float lengthSqr = m_normal.GetLengthSquared();
	ASSERT_OR_DIE(AreMostlyEqual(lengthSqr, 1.0f), "Attempting to get distance with non-unit normal!");

	return DotProduct(m_normal, point) - m_d;
}


//-------------------------------------------------------------------------------------------------
Vector3 Plane3::GetProjectedPointOntoPlane(const Vector3& point) const
{
	float t = GetTFromPlane(point);
	return point - t * m_normal;
}


//-------------------------------------------------------------------------------------------------
float Plane3::GetTFromPlane(const Vector3& point) const
{
	float lengthSqr = m_normal.GetLengthSquared();
	float t = -1.f;

	if (AreMostlyEqual(lengthSqr, 1.0f, DEFAULT_EPSILON))
	{
		t = DotProduct(m_normal, point) - m_d;
	}
	else
	{
		t = (DotProduct(m_normal, point) - m_d) / lengthSqr;
	}

	return t;
}
