///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: Nov 16th, 2021
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/Core/EngineCommon.h"
#include "Engine/Math/MathUtils.h"
#include "Engine/Math/Matrix2.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------
const Matrix2 Matrix2::IDENTITY = Matrix2(Vector2::X_AXIS, Vector2::Y_AXIS);
const Matrix2 Matrix2::ZERO = Matrix2(Vector2::ZERO, Vector2::ZERO);

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Matrix2::Matrix2()
{
	*this = IDENTITY;
}


//-------------------------------------------------------------------------------------------------
Matrix2::Matrix2(const Vector2& _iBasis, const Vector2& _jBasis)
{
	iBasis = _iBasis;
	jBasis = _jBasis;
}


//-------------------------------------------------------------------------------------------------
Matrix2::Matrix2(const Matrix2& other)
{
	*this = other;
}


//-------------------------------------------------------------------------------------------------
bool Matrix2::operator==(const Matrix2& other) const
{
	return (iBasis == other.iBasis) && (jBasis == other.jBasis);
}


//-------------------------------------------------------------------------------------------------
void Matrix2::operator=(const Matrix2& other)
{
	Ix = other.Ix;
	Iy = other.Iy;

	Jx = other.Jx;
	Jy = other.Jy;
}


//-------------------------------------------------------------------------------------------------
Matrix2 Matrix2::operator*(const float scalar) const
{
	Matrix2 result = *this;

	for (int i = 0; i < 4; ++i)
	{
		result.data[i] *= scalar;
	}

	return result;
}


//-------------------------------------------------------------------------------------------------
Matrix2 Matrix2::operator*(const Matrix2& other) const
{
	Matrix2 result;

	result.Ix = DotProduct(GetXVector(), other.iBasis);
	result.Iy = DotProduct(GetYVector(), other.iBasis);

	result.Jx = DotProduct(GetXVector(), other.jBasis);
	result.Jy = DotProduct(GetYVector(), other.jBasis);

	return result;
}


//-------------------------------------------------------------------------------------------------
Vector2 Matrix2::operator*(const Vector2& v) const
{
	Vector2 result;

	result.x = DotProduct(GetXVector(), v);
	result.y = DotProduct(GetYVector(), v);

	return result;
}


//-------------------------------------------------------------------------------------------------
void Matrix2::operator*=(const float scalar)
{
	for (int i = 0; i < 4; ++i)
	{
		data[i] *= scalar;
	}
}


//-------------------------------------------------------------------------------------------------
void Matrix2::Transpose()
{
	*this = GetTranspose();
}


//-------------------------------------------------------------------------------------------------
void Matrix2::Invert()
{
	*this = GetInverse();
}


//-------------------------------------------------------------------------------------------------
Matrix2 Matrix2::GetTranspose() const
{
	Matrix2 transpose;

	transpose.Ix = Ix;
	transpose.Iy = Jx;
	transpose.Jx = Iy;
	transpose.Jy = Jy;

	return transpose;
}


//-------------------------------------------------------------------------------------------------
Matrix2 Matrix2::GetInverse() const
{
	float det = GetDeterminant();
	ASSERT_OR_DIE(det != 0.f, "Cannot invert!");

	Matrix2 inverse;
	inverse.Ix = Jy;
	inverse.Iy = -1.0f * Iy;
	inverse.Jx = -1.0f * Jx;
	inverse.Jy = Iy;
	inverse *= (1.f / det);

	return inverse;
}


//-------------------------------------------------------------------------------------------------
Vector2 Matrix2::GetXVector() const
{
	return Vector2(Ix, Jx);
}


//-------------------------------------------------------------------------------------------------
Vector2 Matrix2::GetYVector() const
{
	return Vector2(Iy, Jy);
}


//-------------------------------------------------------------------------------------------------
float Matrix2::GetDeterminant() const
{
	return Ix * Jy - Iy * Jx;
}
