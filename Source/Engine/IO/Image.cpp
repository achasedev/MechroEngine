///--------------------------------------------------------------------------------------------------------------------------------------------------
/// Author: Andrew Chase
/// Date Created: March 14th, 2020
/// Description: 
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// INCLUDES
///--------------------------------------------------------------------------------------------------------------------------------------------------
#include "Engine/IO/Image.h"
#define STB_IMAGE_IMPLEMENTATION
#include "ThirdParty/stb/stb_image.h"

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// DEFINES
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// ENUMS, TYPEDEFS, STRUCTS, FORWARD DECLARATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// GLOBALS AND STATICS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// C FUNCTIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

///--------------------------------------------------------------------------------------------------------------------------------------------------
/// CLASS IMPLEMENTATIONS
///--------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
Image::~Image()
{
	SAFE_FREE_POINTER(m_data);
}


//-------------------------------------------------------------------------------------------------
bool Image::LoadFromFile(const char* filepath)
{
	ASSERT_OR_DIE(m_data == nullptr, "Image already loaded!");

	int numComponentsRequested = 0;
	m_data = (uint8*)stbi_load(filepath, &m_dimensions.x, &m_dimensions.y, &m_numComponentsPerTexel, numComponentsRequested);

	return (m_data != nullptr);
}


//-------------------------------------------------------------------------------------------------
Color Image::GetTexelColor(int x, int y)
{
	ASSERT_OR_DIE(x >= 0 && y >= 0 && x < m_dimensions.x && y < m_dimensions.y, "Image coords were out of bounds, coords were (%u, %u) for image of dimensions (%i, %i)", x, y, m_dimensions.x, m_dimensions.y)
	
	uint32 texelIndex = y * (uint32)m_dimensions.x + x;
	uint32 dataIndex = texelIndex * m_numComponentsPerTexel;

	Color color;
	if (m_numComponentsPerTexel >= 1) { color.r = m_data[dataIndex + 0]; }
	if (m_numComponentsPerTexel >= 2) { color.g = m_data[dataIndex + 1]; }
	if (m_numComponentsPerTexel >= 3) { color.b = m_data[dataIndex + 2]; }
	if (m_numComponentsPerTexel == 4) { color.a = m_data[dataIndex + 3]; }
	
	return color;
}
